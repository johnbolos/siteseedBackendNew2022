# Generated by Django 4.0.5 on 2022-07-28 21:59

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ssTemplates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=250)),
                ('path', models.CharField(max_length=250)),
                ('thumbnail', models.ImageField(default='default-thumb.jpg', upload_to='template_thumbs')),
                ('template_type', models.CharField(default='Free', max_length=100)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_active', models.IntegerField(default=1)),
                ('createdOn', models.DateTimeField(blank=True, default=datetime.datetime(2022, 7, 28, 21, 59, 0, 322546), null=True)),
                ('updatedOn', models.DateTimeField(blank=True, default=datetime.datetime(2022, 7, 28, 21, 59, 0, 322570), null=True)),
            ],
            options={
                'db_table': 'ss_templates',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(default='null', max_length=250)),
                ('display_name', models.CharField(default='null', max_length=250)),
                ('forgot_pswd_status', models.IntegerField(blank=True, default=0)),
                ('profile_picture', models.ImageField(default='default-profile.png', upload_to='profile_pics')),
                ('bio', models.CharField(default='null', max_length=500)),
                ('updatedOn', models.DateTimeField(blank=True, default=datetime.datetime(2022, 7, 28, 21, 59, 0, 320177), null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
